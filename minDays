int possible(vector<int>& bloomDay , int mid, int m ,int k)
{
int n=bloomDay.size();
int counter=0;
int bucket=0;
for(int i=0;i<n;i++){
if(bloomDay[i]<=mid){
    counter=counter+1;
}
else{
   bucket=bucket+(counter/k);
   counter=0;
}
}
bucket=bucket+(counter/k);
if(bucket>=m) return 1;
else return 0;
}

class Solution {
public:
    int minDays(vector<int>& bloomDay, int m, int k) {
        int n=bloomDay.size();
        if(n < (long long ) m*k) return -1;
         int s=*min_element(bloomDay.begin(),bloomDay.end());
        int e=*max_element(bloomDay.begin(),bloomDay.end());
        int ans;
        while(s<=e){
            long long mid=s+(e-s)/2;
            if(possible(bloomDay,mid,m,k)==1){
                ans=mid;
                e=mid-1;
            }
            else{
                s=mid+1;
            }
        }
        return ans;
    }
};
